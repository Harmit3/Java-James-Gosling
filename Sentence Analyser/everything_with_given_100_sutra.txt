package Main;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class SentenceAnalyzer extends JFrame {
    private JLabel instructionLabel;
    private JTextField sentenceField;
    private JButton analyzeButton, saveResultsButton;
    private JCheckBox countWords, countCharsWithSpaces, countCharsWithoutSpaces;
    private JTextArea resultArea;

    public SentenceAnalyzer() {
        setTitle("Sentence Analyzer");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        // Instruction label
        instructionLabel = new JLabel("Enter a sentence to analyze");
        instructionLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.insets = new Insets(10, 10, 5, 10);
        gbc.anchor = GridBagConstraints.CENTER;
        add(instructionLabel, gbc);

        // Sentence text field
        sentenceField = new JTextField(20);
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.insets = new Insets(5, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        add(sentenceField, gbc);

        // Analyze and Save Results buttons
        analyzeButton = new JButton("Analyze");
        saveResultsButton = new JButton("Save Results");

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 0));
        buttonPanel.add(analyzeButton);
        buttonPanel.add(saveResultsButton);

        gbc.gridy = 2;
        gbc.gridx = 0;
        gbc.gridwidth = 3;
        gbc.insets = new Insets(10, 10, 10, 10);
        add(buttonPanel, gbc);

        // Checkboxes for analysis options
        countWords = new JCheckBox("Count Words");
        countCharsWithSpaces = new JCheckBox("Count Characters (with spaces)");
        countCharsWithoutSpaces = new JCheckBox("Count Characters (without spaces)");

        JPanel checkBoxPanel = new JPanel();
        checkBoxPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 0));
        checkBoxPanel.add(countWords);
        checkBoxPanel.add(countCharsWithSpaces);
        checkBoxPanel.add(countCharsWithoutSpaces);

        gbc.gridy = 3;
        gbc.gridx = 0;
        gbc.gridwidth = 3;
        gbc.insets = new Insets(5, 10, 5, 10);
        add(checkBoxPanel, gbc);

        // Result area
        resultArea = new JTextArea(5, 30);
        resultArea.setEditable(false);
        resultArea.setLineWrap(true);
        resultArea.setWrapStyleWord(true);
        resultArea.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(resultArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        gbc.gridy = 4;
        gbc.gridx = 0;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        add(scrollPane, gbc);

        // Event handling
        analyzeButton.addActionListener(e -> analyzeSentence()); // Handle analyze button click
        saveResultsButton.addActionListener(e -> saveAnalysisResults()); // Handle save results button click
        sentenceField.addActionListener(e -> analyzeSentence()); // Handle 'Enter' key press in text field

        // Add hover tooltips using custom popups
        addHoverTooltip(analyzeButton, "Click to analyze the entered sentence.");
        addHoverTooltip(saveResultsButton, "Click to save the analysis results.");

        pack(); // Adjust the window size based on the preferred sizes of its components
        setResizable(true); // Allow the window to be resizable
        setLocationRelativeTo(null); // Center the window on the screen
    }

    private void analyzeSentence() {
        String sentence = sentenceField.getText().trim();
        if (sentence.isEmpty()) {
            resultArea.setText("Please enter a sentence to analyze.");
            return;
        }

        StringBuilder result = new StringBuilder();
        if (countWords.isSelected()) {
            int wordCount = sentence.split("\\s+").length;
            result.append("Word Count: ").append(wordCount).append("\n");
        }
        if (countCharsWithSpaces.isSelected()) {
            int charCountWithSpaces = sentence.length();
            result.append("Character Count (with spaces): ").append(charCountWithSpaces).append("\n");
        }
        if (countCharsWithoutSpaces.isSelected()) {
            int charCountWithoutSpaces = sentence.replace(" ", "").length();
            result.append("Character Count (without spaces): ").append(charCountWithoutSpaces).append("\n");
        }

        if (result.length() == 0) {
            resultArea.setText("Please select at least one analysis option.");
        } else {
            resultArea.setText(result.toString());
        }
    }

    private void saveAnalysisResults() {
        String sentence = sentenceField.getText().trim();
        if (sentence.isEmpty()) {
            resultArea.setText("Please enter a sentence to analyze before saving.");
            return;
        }

        if (resultArea.getText().isEmpty()) {
            resultArea.setText("No option is selected, so analysis aborted.");
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("sentence_analysis_results.txt", true))) {
            writer.write("Sentence: " + sentence + "\n");
            writer.write(resultArea.getText());
            writer.write("\n\n"); // Add two new lines for separation
            resultArea.setText("Analysis results saved successfully.");
        } catch (IOException e) {
            resultArea.setText("Error saving analysis results: " + e.getMessage());
        }
    }

    private void addHoverTooltip(JButton button, String tooltipText) {
        PopupFactory popupFactory = PopupFactory.getSharedInstance();
        JLabel tooltipLabel = new JLabel(tooltipText);
        tooltipLabel.setOpaque(true);
        tooltipLabel.setBackground(Color.YELLOW);
        tooltipLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        button.addMouseListener(new MouseAdapter() {
            Popup tooltipPopup;

            @Override
            public void mouseEntered(MouseEvent e) {
                Point location = button.getLocationOnScreen();
                tooltipPopup = popupFactory.getPopup(button, tooltipLabel, location.x, location.y + button.getHeight());
                tooltipPopup.show();
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (tooltipPopup != null) {
                    tooltipPopup.hide();
                }
            }
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SentenceAnalyzer analyzer = new SentenceAnalyzer();
            analyzer.setVisible(true);
        });
    }
}
